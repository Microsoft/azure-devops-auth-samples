using System;

using Microsoft.VisualStudio.Services.Client;
using Microsoft.VisualStudio.Services.DelegatedAuthorization;
using Microsoft.VisualStudio.Services.WebApi;
using System.Threading.Tasks;
using Microsoft.Identity.Client;
using Microsoft.VisualStudio.Services.Common;
using System.Net;

namespace NonInteractivePatGenerationSample
{
    public static class Program
    {
        // This is the resource ID for the ADO application - don't change this.
        private const string VstsResourceId = "499b84ac-1321-427f-aa17-267ca6975798/.default";

        public static async Task Main(string[] args)
        {
            const string clientID = "[your AAD application ID]";
            const string username = "[your AAD username]";
            const string password = "[your AAD password]";
            const string adoInstance = "https://dev.azure.com/[your ADO account name]";

            string[] scopes = new string[] { VstsResourceId };

            var clientApp = PublicClientApplicationBuilder
                .Create(clientID)
                .WithAuthority(AadAuthorityAudience.AzureAdMultipleOrgs)
                .Build();

            var authenticationResult = await clientApp.AcquireTokenByUsernamePassword(scopes, username, new NetworkCredential("", password).SecurePassword).ExecuteAsync().ConfigureAwait(false);

            VssCredentials vstsCredential = new VssAadCredential(new VssAadToken("Bearer", authenticationResult.AccessToken));

            var connection = new VssConnection(new Uri(adoInstance), vstsCredential);
            var client = connection.GetClient<Microsoft.VisualStudio.Services.DelegatedAuthorization.WebApi.TokenHttpClient>();

            var pat = await client.CreateSessionTokenAsync(
                new SessionToken
                {
                    DisplayName = "Generated by sample code",
                    Scope = "vso.work"
                },
                tokenType: SessionTokenType.Compact
                ).ConfigureAwait(false);

            Console.WriteLine($"PAT token: {pat.Token}");
        }
    }
}